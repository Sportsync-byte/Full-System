import express from 'express';
import { PrismaClient } from '@prisma/client';
import { auth } from '../middleware/auth';

const router = express.Router();
const prisma = new PrismaClient();

// Get organization details
router.get('/:id', auth, async (req, res) => {
  try {
    const organization = await prisma.organization.findUnique({
      where: { id: req.params.id },
      include: {
        venues: {
          include: {
            courts: true
          }
        },
        subscription: true
      }
    });

    if (!organization) {
      return res.status(404).json({ message: 'Organization not found' });
    }

    res.json(organization);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Create organization
router.post('/', auth, async (req, res) => {
  try {
    const { name, type } = req.body;

    const organization = await prisma.organization.create({
      data: {
        name,
        type,
      }
    });

    res.status(201).json(organization);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

// Update organization
router.put('/:id', auth, async (req, res) => {
  try {
    const { name, type } = req.body;

    const organization = await prisma.organization.update({
      where: { id: req.params.id },
      data: {
        name,
        type,
      }
    });

    res.json(organization);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
});

export default router;