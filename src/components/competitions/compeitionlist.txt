import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Dialog,
  Tabs,
  Tab,
} from '@mui/material';
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Add as AddIcon,
  EmojiEvents as TrophyIcon,
} from '@mui/icons-material';
import { Competition, SportType } from '../../types/types';
import CompetitionForm from './CompetitionForm';
import StandingsTable from './StandingsTable';
import { format } from 'date-fns';

const CompetitionList: React.FC = () => {
  const [competitions, setCompetitions] = useState<Competition[]>([]);
  const [selectedCompetition, setSelectedCompetition] = useState<Competition | null>(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [isStandingsOpen, setIsStandingsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState(0);

  useEffect(() => {
    fetchCompetitions();
  }, []);

  const fetchCompetitions = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/competitions');
      const data = await response.json();
      setCompetitions(data);
    } catch (error) {
      console.error('Error fetching competitions:', error);
    }
  };

  const handleAddCompetition = () => {
    setSelectedCompetition(null);
    setIsFormOpen(true);
  };

  const handleEditCompetition = (competition: Competition) => {
    setSelectedCompetition(competition);
    setIsFormOpen(true);
  };

  const handleDeleteCompetition = async (competitionId: string) => {
    if (window.confirm('Are you sure you want to delete this competition?')) {
      try {
        await fetch(`http://localhost:3001/api/competitions/${competitionId}`, {
          method: 'DELETE',
        });
        fetchCompetitions();
      } catch (error) {
        console.error('Error deleting competition:', error);
      }
    }
  };

  const handleViewStandings = (competition: Competition) => {
    setSelectedCompetition(competition);
    setIsStandingsOpen(true);
  };

  const handleFormSubmit = async (competitionData: Partial<Competition>) => {
    try {
      const method = selectedCompetition ? 'PUT' : 'POST';
      const url = selectedCompetition 
        ? `http://localhost:3001/api/competitions/${selectedCompetition.id}`
        : 'http://localhost:3001/api/competitions';

      await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(competitionData),
      });

      setIsFormOpen(false);
      fetchCompetitions();
    } catch (error) {
      console.error('Error saving competition:', error);
    }
  };

  const filterCompetitions = () => {
    const now = new Date();
    switch (activeTab) {
      case 0: // Active
        return competitions.filter(comp => 
          new Date(comp.startDate) <= now && new Date(comp.endDate) >= now
        );
      case 1: // Upcoming
        return competitions.filter(comp => new Date(comp.startDate) > now);
      case 2: // Completed
        return competitions.filter(comp => new Date(comp.endDate) < now);
      default:
        return competitions;
    }
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
        <Typography variant="h4">Competitions</Typography>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          onClick={handleAddCompetition}
        >
          Add Competition
        </Button>
      </Box>

      <Tabs
        value={activeTab}
        onChange={(_, newValue) => setActiveTab(newValue)}
        sx={{ mb: 2 }}
      >
        <Tab label="Active" />
        <Tab label="Upcoming" />
        <Tab label="Completed" />
      </Tabs>

      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Sport</TableCell>
              <TableCell>Type</TableCell>
              <TableCell>Start Date</TableCell>
              <TableCell>End Date</TableCell>
              <TableCell>Teams</TableCell>
              <TableCell>Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filterCompetitions().map((competition) => (
              <TableRow key={competition.id}>
                <TableCell>{competition.name}</TableCell>
                <TableCell>{competition.sportType}</TableCell>
                <TableCell>{competition.type}</TableCell>
                <TableCell>
                  {format(new Date(competition.startDate), 'dd/MM/yyyy')}
                </TableCell>
                <TableCell>
                  {format(new Date(competition.endDate), 'dd/MM/yyyy')}
                </TableCell>
                <TableCell>{competition.teams.length}</TableCell>
                <TableCell>
                  <IconButton onClick={() => handleViewStandings(competition)}>
                    <TrophyIcon />
                  </IconButton>
                  <IconButton onClick={() => handleEditCompetition(competition)}>
                    <EditIcon />
                  </IconButton>
                  <IconButton onClick={() => handleDeleteCompetition(competition.id)}>
                    <DeleteIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      <Dialog
        open={isFormOpen}
        onClose={() => setIsFormOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <CompetitionForm
          competition={selectedCompetition}
          onSubmit={handleFormSubmit}
          onCancel={() => setIsFormOpen(false)}
        />
      </Dialog>

      <Dialog
        open={isStandingsOpen}
        onClose={() => setIsStandingsOpen(false)}
        maxWidth="md"
        fullWidth
      >
        {selectedCompetition && (
          <StandingsTable
            competition={selectedCompetition}
            onClose={() => setIsStandingsOpen(false)}
          />
        )}
      </Dialog>
    </Box>
  );
};

export default CompetitionList;