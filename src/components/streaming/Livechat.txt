import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  Divider,
} from '@mui/material';
import { useAuth } from '../../contexts/AuthContext';
import { Socket } from 'socket.io-client';

interface ChatMessage {
  id: string;
  userId: string;
  userName: string;
  message: string;
  timestamp: Date;
}

interface LiveChatProps {
  gameId: string;
  socket: Socket;
}

const LiveChat: React.FC<LiveChatProps> = ({ gameId, socket }) => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    socket.emit('joinChat', gameId);

    socket.on('chatMessage', (message: ChatMessage) => {
      setMessages(prev => [...prev, message]);
    });

    return () => {
      socket.emit('leaveChat', gameId);
      socket.off('chatMessage');
    };
  }, [gameId, socket]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !user) return;

    const message = {
      gameId,
      userId: user.id,
      userName: user.name,
      message: newMessage,
      timestamp: new Date(),
    };

    socket.emit('sendMessage', message);
    setNewMessage('');
  };

  return (
    <Paper sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      <Typography variant="h6" sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>
        Live Chat
      </Typography>

      <List sx={{ flex: 1, overflow: 'auto', p: 2 }}>
        {messages.map((msg) => (
          <React.Fragment key={msg.id}>
            <ListItem>
              <ListItemText
                primary={
                  <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
                    <Typography variant="subtitle2">{msg.userName}</Typography>
                    <Typography variant="caption" color="text.secondary">
                      {new Date(msg.timestamp).toLocaleTimeString()}
                    </Typography>
                  </Box>
                }
                secondary={msg.message}
              />
            </ListItem>
            <Divider component="li" />
          </React.Fragment>
        ))}
        <div ref={messagesEndRef} />
      </List>

      <Box
        component="form"
        onSubmit={handleSendMessage}
        sx={{
          p: 2,
          borderTop: 1,
          borderColor: 'divider',
          display: 'flex',
          gap: 1,
        }}
      >
        <TextField
          fullWidth
          size="small"
          placeholder="Type a message..."
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          disabled={!user}
        />
        <Button
          type="submit"
          variant="contained"
          disabled={!user || !newMessage.trim()}
        >
          Send
        </Button>
      </Box>
    </Paper>
  );
};

export default LiveChat;