import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Switch,
  FormControlLabel,
  Button,
  Grid,
  Alert,
  Divider,
} from '@mui/material';

interface SystemSettings {
  maxConcurrentStreams: number;
  maxStreamDuration: number;
  autoEndInactiveStreams: boolean;
  inactivityTimeout: number;
  maxChatMessageLength: number;
  chatModeration: boolean;
  profanityFilter: boolean;
  maxStorageDays: number;
  backupEnabled: boolean;
  backupFrequency: number;
}

const SystemSettings: React.FC = () => {
  const [settings, setSettings] = useState<SystemSettings>({
    maxConcurrentStreams: 10,
    maxStreamDuration: 240,
    autoEndInactiveStreams: true,
    inactivityTimeout: 30,
    maxChatMessageLength: 500,
    chatModeration: true,
    profanityFilter: true,
    maxStorageDays: 30,
    backupEnabled: true,
    backupFrequency: 24,
  });
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);

  useEffect(() => {
    fetchSettings();
  }, []);

  const fetchSettings = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/admin/settings');
      const data = await response.json();
      setSettings(data);
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to load settings' });
    }
  };

  const handleChange = (field: keyof SystemSettings) => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const value = event.target.type === 'checkbox' ? event.target.checked : Number(event.target.value);
    setSettings(prev => ({ ...prev, [field]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:3001/api/admin/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(settings),
      });

      if (response.ok) {
        setMessage({ type: 'success', text: 'Settings updated successfully' });
      } else {
        throw new Error('Failed to update settings');
      }
    } catch (error) {
      setMessage({ type: 'error', text: 'Failed to update settings' });
    }
  };

  return (
    <Box component="form" onSubmit={handleSubmit}>
      <Typography variant="h5" sx={{ mb: 3 }}>
        System Settings
      </Typography>

      {message && (
        <Alert severity={message.type} sx={{ mb: 3 }}>
          {message.text}
        </Alert>
      )}

      <Paper sx={{ p: 3 }}>
        <Typography variant="h6" gutterBottom>
          Streaming Settings
        </Typography>
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Max Concurrent Streams"
              type="number"
              value={settings.maxConcurrentStreams}
              onChange={handleChange('maxConcurrentStreams')}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Max Stream Duration (minutes)"
              type="number"
              value={settings.maxStreamDuration}
              onChange={handleChange('maxStreamDuration')}
            />
          </Grid>
          <Grid item xs={12}>
            <FormControlLabel
              control={
                <Switch
                  checked={settings.autoEndInactiveStreams}
                  onChange={handleChange('autoEndInactiveStreams')}
                />
              }
              label="Auto-end Inactive Streams"
            />
          </Grid>
          <Grid item xs={12} sm={6}>