import { Request, Response, NextFunction } from 'express';
import { Team } from '../models/Team';
import { Match } from '../models/Match';
import { AppError } from '../utils/AppError';
import { catchAsync } from '../utils/catchAsync';

export const createTeam = catchAsync(
  async (req: Request, res: Response, next: NextFunction) => {
    const team = await Team.create(req.body);

    res.status(201).json({
      status: 'success',
      data: {
        team,
      },
    });
  }
);

export const getTeam = catchAsync(
  async (req: Request, res: Response, next: NextFunction) => {
    const team = await Team.findById(req.params.id);

    if (!team) {
      throw new AppError('Team not found', 404);
    }

    // Get recent matches
    const recentMatches = await Match.find({
      $or: [{ homeTeam: team._id }, { awayTeam: team._id }],
    })
      .sort({ date: -1 })
      .limit(5)
      .populate('competition');

    res.status(200).json({
      status: 'success',
      data: {
        team,
        recentMatches,
      },
    });
  }
);

export const updateTeam = catchAsync(
  async (req: Request, res: Response, next: NextFunction) => {
    const team = await Team.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });

    if (!team) {
      throw new AppError('Team not found', 404);
    }

    res.status(200).json({
      status: 'success',
      data: {
        team,
      },
    });
  }
);

export const deleteTeam = catchAsync(
  async (req: Request, res: Response, next: NextFunction) => {
    const team = await Team.findById(req.params.id);

    if (!team) {
      throw new AppError('Team not found', 404);
    }

    // Check if team has any matches
    const hasMatches = await Match.exists({
      $or: [{ homeTeam: team._id }, { awayTeam: team._id }],
    });

    if (hasMatches) {
      // Soft delete - just mark as inactive
      team.isActive = false;
      await team.save();
    } else {
      // Hard delete if no matches
      await team.deleteOne();
    }

    res.status(204).json({
      status: 'success',
      data: null,
    });
  }
);

export const getTeamStatistics = catchAsync(
  async (req: Request, res: Response, next: NextFunction) => {
    const team = await Team.findById(req.params.id);

    if (!team) {
      throw new AppError('Team not found', 404);
    }

    const matches = await Match.find({
      $or: [{ homeTeam: team._id }, { awayTeam: team._id }],
      status: 'completed',
    });

    const stats = {
      totalMatches: matches.length,
      wins: 0,
      draws: 0,
      losses: 0,
      goalsFor: 0,
      goalsAgainst: 0,
    };

    matches.forEach((match) => {
      const isHome = match.homeTeam.toString() === team._id.toString();
      const teamScore = isHome ? match.score.home : match.score.away;
      const opponentScore = isHome ? match.score.away : match.score.home;

      stats.goalsFor += teamScore;
      stats.goalsAgainst += opponentScore;

      if (teamScore > opponentScore) stats.wins++;
      else if (teamScore < opponentScore) stats.losses++;
      else stats.draws++;
    });

    res.status(200).json({
      status: 'success',
      data: {
        stats,
      },
    });
  }
);